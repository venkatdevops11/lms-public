pipeline {
   environment {
     REPONAME = "yvr522/lms"
     DOCKER_CRED = credentials('dock_cred')
         }
   agent {
     label 'docker'
          }
   stages {
     stage('Build the docker image') {
          steps {
            sh 'echo "Building the docker image"'
            sh 'cd api && sudo docker build -t $REPONAME:$BUILD_NUMBER .'
                }
        }
     stage('Authenticating with the docker hub') {
          steps {
            sh 'echo "Authenticating with docker"'
            sh 'echo $DOCKER_CRED_PSW | sudo docker login -u $DOCKER_CRED_USR --password-stdin'
                }
          }

          stage('Pushing the docker image') {
            steps {
              sh 'sudo docker push $REPONAME:$BUILD_NUMBER'
                  }
           }
          stage('Removing older images') {
            steps {
                    sh 'sudo docker rmi -f $REPONAME:$BUILD_NUMBER'
                        }
                }

         // stage('Creating the database container') {
            //  steps {
                 //   sh 'sudo docker container rm -f lms-db'
                 //   sh 'sudo docker container run -d --name lms-db -p 5432:5432 -e POSTGRES_PASSWORD=welcome1 postgres'
             //       }
           //     }

          stage('Running the docker container') {
              steps {
	            sh 'sudo docker container rm --force lms-be'
                    sh 'sudo docker run -d -p 8080:8080 -e DATABASE_URL=postgresql://postgres:welcome1@172.17.0.2:5432/postgres --name lms-be -e PORT=8080 -e MODE=local $REPONAME:$BUILD_NUMBER'
                    }
                }
        }
}

